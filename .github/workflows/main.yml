name: Create Release from CHANGELOG

on:
  push:
    branches: [main]
    paths:
      - "CHANGELOG.md" # Only trigger when CHANGELOG.md is updated

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to get commit messages

      - name: Extract latest version and notes
        id: changelog
        run: |
          # Extract the first version number from CHANGELOG.md
          VERSION=$(grep -m 1 '^## v' CHANGELOG.md | sed 's/^## \(v[0-9.]*[0-9]\(-[a-zA-Z0-9]*\)*\).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract notes for this version (everything between this version header and the next version header)
          NOTES=$(awk -v ver="$VERSION" '
            BEGIN { found=0; capture=0; notes=""; }
            $0 ~ "^## " ver { found=1; capture=1; next; }
            $0 ~ /^## v/ && capture==1 { capture=0; }
            capture==1 { notes = notes $0 "\n"; }
            END { print notes; }
          ' CHANGELOG.md)

          # Get recent commits since last tag with GitHub usernames
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")

          # Function to get GitHub username from email
          get_github_username() {
            local email="$1"
            local commit_hash="$2"

            # First try to extract username from GitHub noreply email
            if [[ "$email" =~ ([0-9]+\+)?([^@]+)@users\.noreply\.github\.com ]]; then
              echo "${BASH_REMATCH[2]}"
              return
            fi

            # Try to get GitHub username via API using commit hash
            local github_user=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$commit_hash" | \
              jq -r '.author.login // empty' 2>/dev/null)

            if [ -n "$github_user" ] && [ "$github_user" != "null" ]; then
              echo "$github_user"
              return
            fi

            # Fallback: try to get user by email via API
            local api_user=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/search/users?q=$email+in:email" | \
              jq -r '.items[0].login // empty' 2>/dev/null)

            if [ -n "$api_user" ] && [ "$api_user" != "null" ]; then
              echo "$api_user"
            else
              # Final fallback: use the part before @ in email
              echo "${email%%@*}"
            fi
          }

          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, get all commits
            COMMIT_DATA=$(git log --pretty=format:"%H|%s|%ae" | grep -E "\|(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)")
          else
            # Get commits between previous tag and HEAD
            COMMIT_DATA=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"%H|%s|%ae" | grep -E "\|(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)")
          fi

          # Filter to only include PR commits - those containing (#number) but exclude duplicate Fixes #number entries
          FILTERED_COMMIT_DATA=$(echo "$COMMIT_DATA" | grep -E "\(#[0-9]+\)" || echo "")

          COMMITS=""
          while IFS='|' read -r hash message email; do
            [ -z "$hash" ] && continue
            username=$(get_github_username "$email" "$hash")
            COMMITS="${COMMITS}  - $message (@$username)\n"
          done <<< "$FILTERED_COMMIT_DATA"

          # Combine CHANGELOG notes with commit messages
          FULL_NOTES="${NOTES}\n\n### Commits\n${COMMITS}"

          # Save notes to output with correct GitHub multiline syntax
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "notes<<$EOF" >> $GITHUB_OUTPUT
          echo -e "$FULL_NOTES" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

          # For debugging
          echo "Found version: $VERSION"
          echo "Release notes excerpt: $(echo "$NOTES" | head -3)..."
          echo "Commit messages excerpt: $(echo "$COMMITS" | head -3)..."

      - name: Check for existing release
        id: check_release
        run: |
          VERSION=${{ steps.changelog.outputs.version }}
          if gh release view $VERSION &>/dev/null; then
            echo "Release already exists: $VERSION"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing release found for: $VERSION"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create zip archive
        if: steps.check_release.outputs.exists == 'false'
        run: zip -r my-unicorn-${{ steps.changelog.outputs.version }}.zip ./ -x "*.git*" ".github/*"

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          name: "Release ${{ steps.changelog.outputs.version }}"
          body: ${{ steps.changelog.outputs.notes }}
          draft: false
          prerelease: ${{ contains(steps.changelog.outputs.version, '-') }}
          files: my-unicorn-${{ steps.changelog.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
