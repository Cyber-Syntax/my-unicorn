[project]
name = 'my-unicorn'
version = '0.11.0-alpha'
description = 'It downloads/updates appimages via GitHub API. It also validates the appimage with SHA256 and SHA512.'
requires-python = ">= 3.12"
dependencies = [
    "babel==2.17.0",
    "pip==25.1.1",
    "requests==2.32.4",
    "cryptography==45.0.3",
    "keyring==25.6.0",
    "packaging==25.0",
    "pyyaml==6.0.2",
    "certifi==2025.4.26",
    "cffi==1.17.1",
    "charset-normalizer==3.4.2",
    "idna==3.10",
    "jaraco-classes==3.4.0",
    "jaraco-context==6.0.1",
    "jaraco-functools==4.1.0",
    "jeepney==0.9.0",
    "more-itertools==10.7.0",
    "pip-review==1.3.0",
    "pycparser==2.22",
    "secretstorage==3.3.3",
    "urllib3==2.5.0",
]
maintainers = [{ name = "Cyber-Syntax" }]

[project.optional-dependencies]
dev = ["pytest>=8.3.4", "pytest-cov>=6.0.0", "pytest-mock>=3.14.0"]

[build-system]
requires = ["setuptools>=79", "wheel"]
build-backend = "setuptools.build_meta"


[tool.pytest.ini_options]
minversion = "8.3.4"
addopts = ["-ra -q --strict-markers --import-mode=importlib--import-mode=importlib"]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = [".", "src"]

[tool.ruff]
include = [
    "pyproject.toml",
    # "src/**/*.py",
    # "scripts/**/*.py",
    # "commands/**/*.py",
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "__init__.py",
]

line-length = 100
indent-width = 4
# target-version = [
#     'py38',
#     'py39',
#     'py310',
#     'py311',
#     'py312',
# ]

[tool.ruff.format]

# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.ruff.lint]

extend-select = ["E501", "D"] # pydocstyle for line-length

fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "E",   # pycodestyle (error)
    "D",   # test pycodestyle
    "F",   # pyflakes
    "B",   # bugbear
    "B9",
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "I",   # isort
    "UP",  # pyupgrade
    "PIE", # flake8-pie
    "PGH", # pygrep-hooks
    "PYI", # flake8-pyi
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

ignore = [
    # only relevant if you run a script with `python -0`,
    # which seems unlikely for any of the scripts in this repo
    "B011",
    # Leave it to the formatter to split long lines and
    # the judgement of all of us.
    # "E501"
]


[tool.ruff.lint.pycodestyle]
max-line-length = 100

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]
